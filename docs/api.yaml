openapi: 3.0.3
info:
  title: Basic E-commerce API
  version: 1.0.0
  description: An API for a simple e-commerce system.
paths:
  /products:
    get:
      tags:
        - products
      summary: Retrieve a List of Products
      description: Retrieve a list of products based on page, price, tags, and category.
      operationId: getProducts
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: If not provided or if page=-1, no pagination will be applied.
        - in: query
          name: tags
          schema:
            type: array
            items:
              type: string
          required: false
          description: Retrieve products with specified tags only.
        - in: query
          name: catId
          schema:
            type: integer
          required: false
          description: Retrieve products by Category ID.
        - in: query
          name: priceFrom
          schema:
            type: number
          required: false
          description: Minimum price for the products to retrieve.
        - in: query
          name: priceTo
          schema:
            type: number
          required: false
          description: Maximum price for the products to retrieve.
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: Maximum number of items to retrieve.
        - in: query
          name: extended
          schema:
            type: boolean
          description: Retrieve an extended version of the product object.
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductShort'
    post:
      tags:
        - products
      summary: Add a New Product to the Store
      description: Add a new product to the store.
      operationId: addProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Ionic Hair Dryer, DOOAIR 1875W Blow Dryer"
                description:
                  type: string
                  example: "Professional-grade ion technology diffuser hair dryer that creates a protective film on the surface of each hair, preventing heat damage and adding shine."
                category_id:
                  type: integer
                  example: 1
                tags:
                  type: array
                  items:
                    type: string
                  example: ["DOOAIR", "Ionic"]
                price:
                  type: number
                  example: 66.45
                discount_price:
                  type: number
                  example: 49.99
                status:
                  type: string
                  enum:
                    - available
                    - not_available
                main_photo_id:
                  type: integer
                  example: 5
                gallery_photos_ids:
                  type: array
                  items:
                    type: integer
                  example: [7, 9, 12]
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '405':
          description: Invalid Input

  /products/{productId}:
    parameters:
      - name: productId
        in: path
        description: ID of the product to return
        required: true
        schema:
          type: integer
    get:
      tags:
        - products
      summary: Find a Product by ID
      description: Find a product by its unique ID.
      operationId: getProductById
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID Supplied
        '404':
          description: Product Not Found
    put:
      tags:
        - products
      summary: Update an Existing Product
      description: Update an existing product in the store.
      operationId: updateProduct
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product Not Found
        '405':
          description: Validation Exception
    delete:
      tags:
        - products
      summary: Delete a Product
      description: Delete a product from the store. A soft delete will be performed to preserve referential integrity.
      operationId: deleteProduct
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted_id:
                    type: integer
                    example: 5

  /photos:
    post:
      tags:
        - photos
      summary: Upload a Photo
      description: Upload a photo with an unassigned product ID, which is useful when creating a product for the first time.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
              example: //todo
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'

  /photos/{photoId}:
    parameters:
      - name: photoId
        in: path
        description: ID of a Photo
        required: true
        schema:
          type: integer
    delete:
      summary: Delete a Photo by ID
      description: Delete a photo by its unique ID.
      tags:
        - photos
      responses:
        '200':
          description: Successful Operation
        '404':
          description: Photo ID Not Found

  /reviews/{productId}:
    parameters:
      - name: productId
        in: path
        description: ID of the reviewed product to retrieve
        required: true
        schema:
          type: integer
    get:
      tags:
        - reviews
      summary: Get a Paginated List of Reviews for a Product
      description: Get a paginated list of reviews for a product.
      operationId: getReviews
      parameters:
        - in: query
          name: rating
          schema:
            type: integer
          required: false
          description: Retrieve only the reviews with this rating.
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '400':
          description: Invalid Parameters
        '404':
          description: Product ID Not Found
    post:
      tags:
        - reviews
      summary: Add a New Review to a Product
      description: Add a new review to a product.
      operationId: postReview
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  example: 1
                rating:
                  type: integer
                  example: 5
                description:
                  type: string
                  example: 'The best hair dryer ever!'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '405':
          description: Validation Exception
        '404':
          description: Product ID Not Found

  /reviews/{reviewId}:
    delete:
      summary: Delete a Review by ID
      description: Delete a review by its unique ID.
      tags:
        - reviews
      parameters:
        - name: reviewId
          in: path
          description: ID of the review to be deleted
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful Operation
        '404':
          description: Review ID Not Found

  /cart:
    get:
      tags:
        - store
      summary: View the Cart
      description: View the list of products in the cart for the authenticated user.
      operationId: getCart
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartItem'

  /cart/{cartItemId}:
    parameters:
      - name: cartItemId
        in: path
        required: true
        schema:
          type: integer
    patch:
      tags:
        - store
      summary: Update Cart Item Quantity
      description: Update the quantity of a cart item.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  example: 3
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '405':
          description: Invalid Quantity
        '404':
          description: Cart Item Not Found
    delete:
      tags:
        - store
      summary: Remove an Item from the User's Cart
      description: Remove an item from the user's cart.
      responses:
        '200':
          description: Successful Operation
        '404':
          description: Cart Item Not Found

  /orders:
    get:
      tags:
        - store
      summary: Get a List of Purchase Orders
      description: Retrieve a list of orders based on page, date range, status, and total amount range.
      parameters:
        - name: userId
          in: query
          description: Filter by user ID (Admin only)
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number for paginated results
          required: false
          schema:
            type: integer
            minimum: 1
        - name: date_from
          in: query
          description: Start date for filtering orders (e.g., YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date
        - name: date_to
          in: query
          description: End date for filtering orders (e.g., YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date
        - name: status
          in: query
          description: Order status filter
          required: false
          schema:
            type: string
            enum: ['created', 'shipped', 'refused', 'completed']
        - name: total_amount_from
          in: query
          description: Minimum total amount for filtering orders
          required: false
          schema:
            type: number
            minimum: 0.01
        - name: total_amount_to
          in: query
          description: Maximum total amount for filtering orders
          required: false
          schema:
            type: number
            minimum: 0.01
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      tags:
        - store
      summary: Place a New Purchase Order
      description: Create a new order for an array of cart items. This process involves removing the referenced items from the cart and adding them to order_items, thereby denormalizing the data.
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                address_id:
                  type: integer
                  example: 1
                shipping_fee:
                  type: number
                  example: 4.99
                cart_items_ids:
                  type: array
                  items:
                    type: integer
                  example: [12]
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /orders/{orderId}:
    parameters:
      - name: orderId
        in: path
        description: ID of an order
        required: true
        schema:
          type: integer
    get:
      tags:
        - store
      summary: Retrieve a Purchase Order by ID
      description: Retrieve a purchase order by its unique ID.
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid ID
        '404':
          description: Order Not Found
    patch:
      tags:
        - store
      summary: Update the Status of an Order
      description: Update the status of an existing order.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: ['created', 'shipped', 'refused', 'completed']
      responses:
        '200':
          description: Successful Operation. Returns the updated order object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405': 
          description: Validation Exception
        '404':
          description: Order Not Found

  /addresses:
    get:
      tags:
        - address
      summary: Retrieve the Complete List of Shipping Addresses
      description: Retrieve the complete list of shipping addresses for the authenticated user or a queried user ID.
      parameters:
        - name: userId
          in: query
          description: Filter addresses by user ID. This works only for admins.
          schema:
            type: string
        - name: country
          in: query
          description: Filter addresses by country.
          schema:
            type: string
        - name: state
          in: query
          description: Filter addresses by state/province.
          schema:
            type: string
        - name: pc
          in: query
          description: Filter addresses by postal code.
          schema:
            type: string
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
        '401':
          description: Unauthorized
    post:
      tags:
        - address
      summary: Add a New Shipping Address for the Authenticated User
      description: Add a new shipping address for the authenticated user.
      operationId: postAddress
      requestBody:
          $ref: '#/components/requestBodies/Address'
      responses:
        '200':
          description: Successful Operation. Returns the created object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '405':
          description: Validation Exception
  
  /addresses/{addressId}:
    parameters:
      - name: addressId
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - address
      summary: Retrieve a Shipping Address by ID
      description: Retrieve a shipping address by its unique ID.
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '401':
          description: Unauthorized
        '404':
          description: Address Not Found
    put:
      tags:
        - address
      summary: Update a Shipping Address
      description: Update an existing shipping address.
      requestBody:
        $ref: '#/components/requestBodies/Address'
      responses:
        '200':
          description: Successful Operation. Returns the updated object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '401':
          description: Unauthorized
        '404':
          description: Address Not Found
    delete:
      tags:
        - address
      summary: Delete a Shipping Address
      description: Delete a shipping address by its unique ID.
      responses:
        '200':
          description: Successful Operation
        '401':
          description: Unauthorized
        '404':
          description: Address ID Not Found

  /user:
    get:
      tags:
        - user
      parameters:
        - name: userId
          in: query
          description: Filter by user ID (For admins only)
          schema:
            type: string
      summary: Get User Data
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    post:
      tags:
        - user
      summary: Register a New User
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - user
      summary: Update the Authenticated User
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        '200':
          description: Successful Operation. Returns the updated object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /user/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: ID of a user
        schema:
          type: string
    delete:
      tags:
        - user
      summary: Delete User
      description: Delete a user by their unique ID.
      responses:
        '200':
          description: Successful Operation
        '401':
          description: Unauthorized
        '404':
          description: User Not Found
  
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username/password
          
  /user/logout:
    post:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
        
      
components:
  requestBodies:
    User:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              first_name:
                type: string
                example: 'John'
              last_name:
                type: string
                example: 'Doe'
              email:
                type: string
                format: email
              password:
                type: string
              google_id:
                type: string
              google_token:
                type: string
    Address:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              recipient_name:
                type: string
                example: 'John Doe'
              street_address:
                type: string
                example: 'Via Benedetto Croce, 26'
              city:
                type: string
                example: 'Napoli'
              state_province:
                type: string
                example: 'NA'
              postal_code:
                type: string
                example: '80100'
              country:
                type: string
                enum: ['it', 'eu', 'uk']
                example: 'it'
              phone_number:
                type: string
                example: '333-4443322'
              notes:
                type: string

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        first_name:
          type: string
          example: 'John'
        last_name:
          type: string
          example: 'Doe'
        email:
          type: string
          format: email
        google_id:
          type: string
        default_address:
          $ref: '#/components/schemas/Address'
        created_at:
          type: string
          format: date-time
    Payment:
      type: object
      properties:
        id:
          type: integer
          example: 23
        amount:
          type: number
          example: 104.97
        method:
          type: string
          example: 'credit-card'
        status:
          type: string
          example: 'pending'
          enum: ['pending', 'confirmed', 'declined', 'refunded']
        timestamp:
          type: string
          format: date-time
    Address:
      type: object
      properties:
        id:
          type: integer
          example: 1
        recipient_name:
          type: string
          example: 'John Doe'
        street_address:
          type: string
          example: 'Via Benedetto Croce, 26'
        city:
          type: string
          example: 'Napoli'
        state_province:
          type: string
          example: 'NA'
        postal_code:
          type: string
          example: '80100'
        country:
          type: string
          enum: ['it', 'eu', 'uk']
          example: 'it'
        phone_number:
          type: string
          example: '333-4443322'
        notes:
          type: string
        created_at:
          type: string
          format: date-time
    OrderItem:
      type: object
      properties:
        id:
          type: integer
          example: 92
        product:
          type: object
          properties:
            id:
              type: integer
              example: 10
            name:
              type: string
              example: 'Ionic Hair Dryer, DOOAIR 1875W Blow Dryer'
            price:
              type: number
              example: 49.99
            main_photo:
              $ref: '#/components/schemas/Photo'
        quantity:
          type: integer
          example: 2
    Order:
      type: object
      properties:
        id:
          type: integer
          example: 12
        user_id:
          type: integer
          example: 1
        status:
          type: string
          enum: ['created', 'shipped', 'refused', 'completed']
        address:
          $ref: '#/components/schemas/Address'
        total_amount:
          type: number
          example: 99.98
        shipping_fee:
          type: number
          example: 4.99
        payment:
          $ref: '#/components/schemas/Payment'
        created_at:
          type: string
          example: '2022-09-19T19:04'
        updated_at:
          type: string
          example: '2022-09-19T22:21'
        items:
          type: array
          items:
           $ref: '#/components/schemas/OrderItem'
    CartItem:
      type: object
      properties:
        id:
          type: integer
          example: 12
        product:
          $ref: '#/components/schemas/ProductShort'
        quantity:
          type: integer
          example: 3
    Review:
      type: object
      properties:
        id:
          type: integer
          example: 11
        rating:
          type: integer
          example: 5
        user_full_name:
          type: string
          example: 'John Doe'
        description:
          type: string
          example: 'Best hairblower ever!'
        created_at:
          type: string
          example: '2022-19-09T13:09'
  
    Photo:
      type: object
      properties:
        id: 
          type: integer
          example: 11
        url:
          type: string
          example: 'https://bucket1.s3.us-west-2.amazonaws.com/dryer.png'
        caption:
          type: string
          example: 'DOOAIR 1875W Blow Dryer'   
          
    Category:
      type: object
      properties:
        id:
          type: integer
          example: 2
        name:
          type: string
          example: 'Hair Dryers'
        parent:
          type: object
          example: { id: 1, name: Electronics, parent: null }
          
    Product:
      type: object
      properties:
        id:
          type: integer
          example: 10
        name: 
          type: string
          example: 'Ionic Hair Dryer, DOOAIR 1875W Blow Dryer'
        description:
          type: string
          example: 'Professional-grade ion technology diffuser hair dryer creates a protective film on the surface of each hair, preventing heat damage and adding shine.'
        category:
          $ref: '#/components/schemas/Category'
        tags:
          type: array
          items:
            type: string
          example: ['DOOAIR', 'Ionic']
        price:
          type: number
          example: 66.45
        discount_price:
          type: number
          example: 49.99
        status:
          type: string
          enum:
            - available
            - not_available
        main_photo:
          $ref: '#/components/schemas/Photo'
        gallery_photos:
          type: array
          items:
            $ref: '#/components/schemas/Photo'
          example: [...]
        rating_avg:
          type: number
          example: 4.5
        created_at:
          type: string
          example: '2022-09-18T17:10'
        updated_at:
          type: string
          example: '2022-09-20T18:21'
          
    ProductShort:
      type: object
      properties:
        id:
          type: integer
          example: 10
        name: 
          type: string
          example: 'Ionic Hair Dryer, DOOAIR 1875W Blow Dryer'
        price:
          type: number
          example: 66.45
        discount_price:
          type: number
          example: 49.99
        status:
          type: string
          enum:
            - available
            - not_available
        main_photo:
          $ref: '#/components/schemas/Photo'
        rating_avg:
          type: number
          example: 4.5