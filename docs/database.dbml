// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

Table products {
  id serial [PK]
  name varchar(255) [NOT NULL]
  description text
  category_id integer
  main_photo_id integer
  tags "varchar(20)[]" 
  price numeric(8, 2) [NOT NULL]
  discount_price numeric(8, 2)
  status product_status [NOT NULL]
  created_at timestamp [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamp
  deleted_at timestamp
}

enum product_status {
  available
  not_available
}

Table product_photos {
  id serial [PK]
  product_id integer
  url text [NOT NULL, UNIQUE]
  caption varchar
}

Table categories {
  id serial [PK]
  name varchar(50) [NOT NULL]
  parent_id integer
}

Table users {
  id serial [PK]
  first_name varchar(255)
  last_name varchar(255)
  email varchar(255) [NOT NULL, UNIQUE]
  password text
  google_id varchar(255)
  google_token text
  default_address integer
  created_at timestamp [not null, default: `CURRENT_TIMESTAMP`]
}

Table admins {
  user_id integer [PK]
}

Table shipping_addresses {
  id serial [PK]
  user_id integer [NOT NULL]
  recipient_name varchar(255) [NOT NULL]
  street_address varchar(255) [NOT NULL]
  city varchar(255) [NOT NULL]
  state_province varchar(255) [NOT NULL, note: "Provincia"]
  postal_code varchar(20) [not null]
  country country_code [not null]
  phone_number varchar(50) [not null]
  notes varchar(255)
  created_at timestamp [not null, default: `CURRENT_TIMESTAMP`]
}

enum country_code {
  it
  uk
  eu
}

Table shipping_fees {
  id serial [PK]
  method varchar(255) [NOT NULL]
  fee numeric(8, 2) [NOT NULL]
  country country_code [NOT NULL]
  postal_code varchar(20)
}

Table orders {
  id integer [PK]
  user_id integer [not null]
  status order_status [not null]
  address_id integer
  shipping_fee number(8, 2)
  total_amount number(8, 2) [not null]
  created_at timestamp [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamp
}

enum order_status {
  created
  shipped
  refused
  completed
}

Table order_items {
  id serial [PK]
  order_id integer [NOT NULL]
  product_id integer [NOT NULL]
  product_name varchar(255) [NOT NULL]
  quantity integer [NOT NULL]
  price_per_item numeric(8, 2) [NOT NULL]
}

Table cart_items {
  id serial [PK]
  user_id integer [NOT NULL]
  product_id integer [NOT NULL]
  quantity integer [NOT NULL]
  created_at timestamp [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamp
}

Table payments {
  id serial [PK]
  user_id integer [NOT NULL]
  order_id integer [NOT NULL]
  amount numeric(8, 2) [NOT NULL]
  timestamp timestamp [NOT NULL, default: `CURRENT_TIMESTAMP`]
  payment_method varchar(50) [NOT NULL, note: "Metodo di pagamento utilizzato (es. carta di credito, PayPal, etc.)"]
  status payment_status [NOT NULL, note: "Stato del pagamento (es. confermato, in attesa, rifiutato, ecc.)"]
}

enum payment_status {
  pending
  confirmed
  declined
  refunded
}

Table reviews {
  id serial [PK]
  rating integer [NOT NULL]
  user_id integer [NOT NULL]
  product_id integer [NOT NULL]
  description varchar(1000)
  created_at timestamp [not null, default: `CURRENT_TIMESTAMP`]
}

Table audit_log {
  id serial [PK]
  user_id integer [note: "ID dell'utente che ha eseguito l'azione (se disponibile)"]
  action_type varchar(50) [NOT NULL, note: "Tipo di azione (es. login, creazione di un ordine, modifica di un prodotto)"]
  action_description text [note: "Descrizione dettagliata dell'azione"]
  timestamp timestamp [NOT NULL, default: `CURRENT_TIMESTAMP`, note: "Data/ora dell'azione"]
}

Table error_log {
  id serial [PK]
  error_message text [NOT NULL, note: "Messaggio di errore"]
  timestamp timestamp [NOT NULL, default: `CURRENT_TIMESTAMP`, note: "Data/ora dell'errore"]
}

Ref: product_photos.product_id > products.id
Ref: products.main_photo_id > product_photos.id
Ref: categories.id < products.category_id
Ref: categories.parent_id > categories.id
Ref: admins.user_id > users.id
Ref: users.default_address > shipping_addresses.id
Ref: shipping_addresses.user_id > users.id
Ref: orders.user_id > users.id
Ref: orders.(address_id, user_id) > shipping_addresses.(id, user_id)
Ref: order_items.order_id > orders.id
Ref: order_items.product_id > products.id
Ref: cart_items.user_id > users.id
Ref: cart_items.product_id > products.id
Ref: payments.user_id > users.id
Ref: payments.order_id > orders.id
Ref: reviews.user_id > users.id
Ref: reviews.product_id > products.id